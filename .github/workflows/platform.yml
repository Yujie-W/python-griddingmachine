name: PlatformTest

on:
  push:
    branches:
      - main
      - staging
      - trying
  pull_request:

jobs:
  test:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3"
    - name: Get full Python version
      id: full-python-version
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
    - name: Install poetry
      run: curl -sL https://install.python-poetry.org | python - -y ${{ matrix.bootstrap-args }}
    - name: Update PATH for Linux and MacOS
      if: runner.os != 'Windows'
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH
    - name: Update PATH for Windows
      if: runner.os == 'Windows'
      run: echo "$env:APPDATA\Python\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - name: Configure poetry
      run: poetry config virtualenvs.in-project true
    - name: Set up cache
      uses: actions/cache@v2
      id: cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      run: timeout 10s poetry run pip --version || rm -rf .venv
    - name: Install dependencies
      run: poetry install
    - name: Run pytest
      run: poetry run pytest --cov --cov-report=xml
    - name: Upload coverage to codecov
      if: runner.os == 'Linux'
      uses: codecov/codecov-action@v1
      with:
        file: coverage.xml
